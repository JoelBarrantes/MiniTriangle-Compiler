
let
	var a : Char;       ! dato de entrada
	var r : Char;       ! resultado = raï¿½z cuadrada entera (piso de raï¿½z)
	const term ~ a;   ! siguiente impar por considerar		

	local 
	recursive
		func pot4(num: Integer): Integer ~ num * pot3(num)
		and
		func pot2(num: Integer): Integer ~ num*num
		and
		func pot3(num: Integer): Integer ~ num * pot2(num)
		and
		proc test(var num: Integer) ~ a := 'T'; test(var num); skip; skip end
		and
		func pot5(num: Integer): Integer ~ num * pot4(num)
		and 
		proc test1(a: Char) ~ test2(a) end
		and
		proc test2(b: Char) ~ test1(b) end


	end;
	var z: Integer;
	const h ~ 'J'
	in

		par
			var i : Integer and
			const hs ~ 'L' and
			var tshucss := pot4(z) 
			and proc proc1(var x: Integer) ~ test(var z) end
		end
			
	end;
	var init := 5;
	par var k : Char and const lol ~ 'A' end;
	proc cancer() ~ skip end
		
	

in 
	a := 'P';
	r := hs;
	proc1(var tshucss);
	r := 'H';
	if 3>5 then repeat do cancer()
	until 3+init> 4
 	end else for var j:= 10 to 20 until 30>3 do cancer() end  end;
	
	skip


end


